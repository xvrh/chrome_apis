// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unnecessary_import

library;

import 'dart:js_interop';
import 'chrome.dart';

export 'chrome.dart';

extension JSChromeJSUsbExtension on JSChrome {
  @JS('usb')
  external JSUsb? get usbNullable;

  /// Use the `chrome.usb` API to interact with connected USB
  /// devices. This API provides access to USB operations from within the
  /// context
  /// of an app. Using this API, apps can function as drivers for hardware
  /// devices.
  ///
  /// Errors generated by this API are reported by setting
  /// [runtime.lastError] and executing the function's regular callback. The
  /// callback's regular parameters will be undefined in this case.
  JSUsb get usb {
    var usbNullable = this.usbNullable;
    if (usbNullable == null) {
      throw ApiNotAvailableException('chrome.usb');
    }
    return usbNullable;
  }
}

@JS()
@staticInterop
class JSUsb {}

extension JSUsbExtension on JSUsb {
  /// Enumerates connected USB devices.
  /// |options|: The properties to search for on target devices.
  external void getDevices(
    EnumerateDevicesOptions options,
    JSFunction callback,
  );

  /// Presents a device picker to the user and returns the [Device]s
  /// selected.
  /// If the user cancels the picker devices will be empty. A user gesture
  /// is required for the dialog to display. Without a user gesture, the
  /// callback will run as though the user cancelled.
  /// |options|: Configuration of the device picker dialog box.
  /// |callback|: Invoked with a list of chosen [Device]s.
  external void getUserSelectedDevices(
    DevicePromptOptions options,
    JSFunction callback,
  );

  /// Returns the full set of device configuration descriptors.
  /// |device|: The [Device] to fetch descriptors from.
  external void getConfigurations(
    Device device,
    JSFunction callback,
  );

  /// Requests access from the permission broker to a device claimed by
  /// Chrome OS if the given interface on the device is not claimed.
  ///
  /// |device|: The [Device] to request access to.
  /// |interfaceId|: The particular interface requested.
  @Deprecated(
      r'This function was Chrome OS specific and calling it on other platforms would fail. This operation is now implicitly performed as part of $(ref:openDevice) and this function will return <code>true</code> on all platforms.')
  external void requestAccess(
    Device device,
    int interfaceId,
    JSFunction callback,
  );

  /// Opens a USB device returned by [getDevices].
  /// |device|: The [Device] to open.
  external void openDevice(
    Device device,
    JSFunction callback,
  );

  /// Finds USB devices specified by the vendor, product and (optionally)
  /// interface IDs and if permissions allow opens them for use.
  ///
  /// If the access request is rejected or the device fails to be opened a
  /// connection handle will not be created or returned.
  ///
  /// Calling this method is equivalent to calling [getDevices] followed
  /// by [openDevice] for each device.
  ///
  /// |options|: The properties to search for on target devices.
  external void findDevices(
    EnumerateDevicesAndRequestAccessOptions options,
    JSFunction callback,
  );

  /// Closes a connection handle. Invoking operations on a handle after it
  /// has been closed is a safe operation but causes no action to be taken.
  /// |handle|: The [ConnectionHandle] to close.
  external void closeDevice(
    ConnectionHandle handle,
    JSFunction? callback,
  );

  /// Select a device configuration.
  ///
  /// This function effectively resets the device by selecting one of the
  /// device's available configurations. Only configuration values greater
  /// than `0` are valid however some buggy devices have a working
  /// configuration `0` and so this value is allowed.
  /// |handle|: An open connection to the device.
  external void setConfiguration(
    ConnectionHandle handle,
    int configurationValue,
    JSFunction callback,
  );

  /// Gets the configuration descriptor for the currently selected
  /// configuration.
  /// |handle|: An open connection to the device.
  external void getConfiguration(
    ConnectionHandle handle,
    JSFunction callback,
  );

  /// Lists all interfaces on a USB device.
  /// |handle|: An open connection to the device.
  external void listInterfaces(
    ConnectionHandle handle,
    JSFunction callback,
  );

  /// Claims an interface on a USB device.
  /// Before data can be transfered to an interface or associated endpoints the
  /// interface must be claimed. Only one connection handle can claim an
  /// interface at any given time. If the interface is already claimed, this
  /// call will fail.
  ///
  /// [releaseInterface] should be called when the interface is no longer
  /// needed.
  ///
  /// |handle|: An open connection to the device.
  /// |interfaceNumber|: The interface to be claimed.
  external void claimInterface(
    ConnectionHandle handle,
    int interfaceNumber,
    JSFunction callback,
  );

  /// Releases a claimed interface.
  /// |handle|: An open connection to the device.
  /// |interfaceNumber|: The interface to be released.
  external void releaseInterface(
    ConnectionHandle handle,
    int interfaceNumber,
    JSFunction callback,
  );

  /// Selects an alternate setting on a previously claimed interface.
  /// |handle|: An open connection to the device where this interface has been
  ///     claimed.
  /// |interfaceNumber|: The interface to configure.
  /// |alternateSetting|: The alternate setting to configure.
  external void setInterfaceAlternateSetting(
    ConnectionHandle handle,
    int interfaceNumber,
    int alternateSetting,
    JSFunction callback,
  );

  /// Performs a control transfer on the specified device.
  ///
  /// Control transfers refer to either the device, an interface or an
  /// endpoint. Transfers to an interface or endpoint require the interface to
  /// be claimed.
  ///
  /// |handle|: An open connection to the device.
  external void controlTransfer(
    ConnectionHandle handle,
    ControlTransferInfo transferInfo,
    JSFunction callback,
  );

  /// Performs a bulk transfer on the specified device.
  /// |handle|: An open connection to the device.
  /// |transferInfo|: The transfer parameters.
  external void bulkTransfer(
    ConnectionHandle handle,
    GenericTransferInfo transferInfo,
    JSFunction callback,
  );

  /// Performs an interrupt transfer on the specified device.
  /// |handle|: An open connection to the device.
  /// |transferInfo|: The transfer parameters.
  external void interruptTransfer(
    ConnectionHandle handle,
    GenericTransferInfo transferInfo,
    JSFunction callback,
  );

  /// Performs an isochronous transfer on the specific device.
  /// |handle|: An open connection to the device.
  external void isochronousTransfer(
    ConnectionHandle handle,
    IsochronousTransferInfo transferInfo,
    JSFunction callback,
  );

  /// Tries to reset the USB device.
  /// If the reset fails, the given connection handle will be closed and the
  /// USB device will appear to be disconnected then reconnected.
  /// In this case [getDevices] or [findDevices] must be called again
  /// to acquire the device.
  ///
  /// |handle|: A connection handle to reset.
  external void resetDevice(
    ConnectionHandle handle,
    JSFunction callback,
  );

  /// Event generated when a device is added to the system. Events are only
  /// broadcast to apps and extensions that have permission to access the
  /// device. Permission may have been granted at install time, when the user
  /// accepted an optional permission (see [permissions.request]), or
  /// through [getUserSelectedDevices].
  external Event get onDeviceAdded;

  /// Event generated when a device is removed from the system. See
  /// [onDeviceAdded] for which events are delivered.
  external Event get onDeviceRemoved;
}

/// Direction, Recipient, RequestType, and TransferType all map to their
/// namesakes within the USB specification.
typedef Direction = String;

typedef Recipient = String;

typedef RequestType = String;

typedef TransferType = String;

/// For interrupt and isochronous modes, SynchronizationType and UsageType map
/// to their namesakes within the USB specification.
typedef SynchronizationType = String;

typedef UsageType = String;

@JS()
@staticInterop
@anonymous
class Device {
  external factory Device({
    /// An opaque ID for the USB device. It remains unchanged until the device is
    /// unplugged.
    int device,

    /// The device vendor ID.
    int vendorId,

    /// The product ID.
    int productId,

    /// The device version (bcdDevice field).
    int version,

    /// The iProduct string read from the device, if available.
    String productName,

    /// The iManufacturer string read from the device, if available.
    String manufacturerName,

    /// The iSerialNumber string read from the device, if available.
    String serialNumber,
  });
}

extension DeviceExtension on Device {
  /// An opaque ID for the USB device. It remains unchanged until the device is
  /// unplugged.
  external int device;

  /// The device vendor ID.
  external int vendorId;

  /// The product ID.
  external int productId;

  /// The device version (bcdDevice field).
  external int version;

  /// The iProduct string read from the device, if available.
  external String productName;

  /// The iManufacturer string read from the device, if available.
  external String manufacturerName;

  /// The iSerialNumber string read from the device, if available.
  external String serialNumber;
}

@JS()
@staticInterop
@anonymous
class ConnectionHandle {
  external factory ConnectionHandle({
    /// An opaque handle representing this connection to the USB device and all
    /// associated claimed interfaces and pending transfers. A new handle is
    /// created each time the device is opened. The connection handle is
    /// different from [Device.device].
    int handle,

    /// The device vendor ID.
    int vendorId,

    /// The product ID.
    int productId,
  });
}

extension ConnectionHandleExtension on ConnectionHandle {
  /// An opaque handle representing this connection to the USB device and all
  /// associated claimed interfaces and pending transfers. A new handle is
  /// created each time the device is opened. The connection handle is
  /// different from [Device.device].
  external int handle;

  /// The device vendor ID.
  external int vendorId;

  /// The product ID.
  external int productId;
}

@JS()
@staticInterop
@anonymous
class EndpointDescriptor {
  external factory EndpointDescriptor({
    /// Endpoint address.
    int address,

    /// Transfer type.
    TransferType type,

    /// Transfer direction.
    Direction direction,

    /// Maximum packet size.
    int maximumPacketSize,

    /// Transfer synchronization mode (isochronous only).
    SynchronizationType? synchronization,

    /// Endpoint usage hint.
    UsageType? usage,

    /// Polling interval (interrupt and isochronous only).
    int? pollingInterval,

    /// Extra descriptor data associated with this endpoint.
    JSArrayBuffer extra_data,
  });
}

extension EndpointDescriptorExtension on EndpointDescriptor {
  /// Endpoint address.
  external int address;

  /// Transfer type.
  external TransferType type;

  /// Transfer direction.
  external Direction direction;

  /// Maximum packet size.
  external int maximumPacketSize;

  /// Transfer synchronization mode (isochronous only).
  external SynchronizationType? synchronization;

  /// Endpoint usage hint.
  external UsageType? usage;

  /// Polling interval (interrupt and isochronous only).
  external int? pollingInterval;

  /// Extra descriptor data associated with this endpoint.
  external JSArrayBuffer extra_data;
}

@JS()
@staticInterop
@anonymous
class InterfaceDescriptor {
  external factory InterfaceDescriptor({
    /// The interface number.
    int interfaceNumber,

    /// The interface alternate setting number (defaults to `0</code).
    int alternateSetting,

    /// The USB interface class.
    int interfaceClass,

    /// The USB interface sub-class.
    int interfaceSubclass,

    /// The USB interface protocol.
    int interfaceProtocol,

    /// Description of the interface.
    String? description,

    /// Available endpoints.
    JSArray endpoints,

    /// Extra descriptor data associated with this interface.
    JSArrayBuffer extra_data,
  });
}

extension InterfaceDescriptorExtension on InterfaceDescriptor {
  /// The interface number.
  external int interfaceNumber;

  /// The interface alternate setting number (defaults to `0</code).
  external int alternateSetting;

  /// The USB interface class.
  external int interfaceClass;

  /// The USB interface sub-class.
  external int interfaceSubclass;

  /// The USB interface protocol.
  external int interfaceProtocol;

  /// Description of the interface.
  external String? description;

  /// Available endpoints.
  external JSArray endpoints;

  /// Extra descriptor data associated with this interface.
  external JSArrayBuffer extra_data;
}

@JS()
@staticInterop
@anonymous
class ConfigDescriptor {
  external factory ConfigDescriptor({
    /// Is this the active configuration?
    bool active,

    /// The configuration number.
    int configurationValue,

    /// Description of the configuration.
    String? description,

    /// The device is self-powered.
    bool selfPowered,

    /// The device supports remote wakeup.
    bool remoteWakeup,

    /// The maximum power needed by this device in milliamps (mA).
    int maxPower,

    /// Available interfaces.
    JSArray interfaces,

    /// Extra descriptor data associated with this configuration.
    JSArrayBuffer extra_data,
  });
}

extension ConfigDescriptorExtension on ConfigDescriptor {
  /// Is this the active configuration?
  external bool active;

  /// The configuration number.
  external int configurationValue;

  /// Description of the configuration.
  external String? description;

  /// The device is self-powered.
  external bool selfPowered;

  /// The device supports remote wakeup.
  external bool remoteWakeup;

  /// The maximum power needed by this device in milliamps (mA).
  external int maxPower;

  /// Available interfaces.
  external JSArray interfaces;

  /// Extra descriptor data associated with this configuration.
  external JSArrayBuffer extra_data;
}

@JS()
@staticInterop
@anonymous
class ControlTransferInfo {
  external factory ControlTransferInfo({
    /// The transfer direction (`"in"` or `"out"`).
    Direction direction,

    /// The transfer target. The target given by `index` must be
    /// claimed if `"interface"` or `"endpoint"`.
    Recipient recipient,

    /// The request type.
    RequestType requestType,

    /// The `bRequest` field, see <i>Universal Serial Bus
    /// Specification Revision 1.1</i> &sect; 9.3.
    int request,

    /// The `wValue` field, see <i>Ibid</i>.
    int value,

    /// The `wIndex` field, see <i>Ibid</i>.
    int index,

    /// The maximum number of bytes to receive (required only by input
    /// transfers).
    int? length,

    /// The data to transmit (required only by output transfers).
    JSArrayBuffer? data,

    /// Request timeout (in milliseconds). The default value `0`
    /// indicates no timeout.
    int? timeout,
  });
}

extension ControlTransferInfoExtension on ControlTransferInfo {
  /// The transfer direction (`"in"` or `"out"`).
  external Direction direction;

  /// The transfer target. The target given by `index` must be
  /// claimed if `"interface"` or `"endpoint"`.
  external Recipient recipient;

  /// The request type.
  external RequestType requestType;

  /// The `bRequest` field, see <i>Universal Serial Bus
  /// Specification Revision 1.1</i> &sect; 9.3.
  external int request;

  /// The `wValue` field, see <i>Ibid</i>.
  external int value;

  /// The `wIndex` field, see <i>Ibid</i>.
  external int index;

  /// The maximum number of bytes to receive (required only by input
  /// transfers).
  external int? length;

  /// The data to transmit (required only by output transfers).
  external JSArrayBuffer? data;

  /// Request timeout (in milliseconds). The default value `0`
  /// indicates no timeout.
  external int? timeout;
}

@JS()
@staticInterop
@anonymous
class GenericTransferInfo {
  external factory GenericTransferInfo({
    /// The transfer direction (`"in"` or `"out"`).
    Direction direction,

    /// The target endpoint address. The interface containing this endpoint must
    /// be claimed.
    int endpoint,

    /// The maximum number of bytes to receive (required only by input
    /// transfers).
    int? length,

    /// The data to transmit (required only by output transfers).
    JSArrayBuffer? data,

    /// Request timeout (in milliseconds). The default value `0`
    /// indicates no timeout.
    int? timeout,
  });
}

extension GenericTransferInfoExtension on GenericTransferInfo {
  /// The transfer direction (`"in"` or `"out"`).
  external Direction direction;

  /// The target endpoint address. The interface containing this endpoint must
  /// be claimed.
  external int endpoint;

  /// The maximum number of bytes to receive (required only by input
  /// transfers).
  external int? length;

  /// The data to transmit (required only by output transfers).
  external JSArrayBuffer? data;

  /// Request timeout (in milliseconds). The default value `0`
  /// indicates no timeout.
  external int? timeout;
}

@JS()
@staticInterop
@anonymous
class IsochronousTransferInfo {
  external factory IsochronousTransferInfo({
    /// Transfer parameters. The transfer length or data buffer specified in this
    /// parameter block is split along `packetLength` boundaries to
    /// form the individual packets of the transfer.
    GenericTransferInfo transferInfo,

    /// The total number of packets in this transfer.
    int packets,

    /// The length of each of the packets in this transfer.
    int packetLength,
  });
}

extension IsochronousTransferInfoExtension on IsochronousTransferInfo {
  /// Transfer parameters. The transfer length or data buffer specified in this
  /// parameter block is split along `packetLength` boundaries to
  /// form the individual packets of the transfer.
  external GenericTransferInfo transferInfo;

  /// The total number of packets in this transfer.
  external int packets;

  /// The length of each of the packets in this transfer.
  external int packetLength;
}

@JS()
@staticInterop
@anonymous
class TransferResultInfo {
  external factory TransferResultInfo({
    /// A value of `0` indicates that the transfer was a success.
    /// Other values indicate failure.
    int? resultCode,

    /// The data returned by an input transfer. `undefined` for output
    /// transfers.
    JSArrayBuffer? data,
  });
}

extension TransferResultInfoExtension on TransferResultInfo {
  /// A value of `0` indicates that the transfer was a success.
  /// Other values indicate failure.
  external int? resultCode;

  /// The data returned by an input transfer. `undefined` for output
  /// transfers.
  external JSArrayBuffer? data;
}

@JS()
@staticInterop
@anonymous
class DeviceFilter {
  external factory DeviceFilter({
    /// Device vendor ID.
    int? vendorId,

    /// Device product ID, checked only if the vendor ID matches.
    int? productId,

    /// USB interface class, matches any interface on the device.
    int? interfaceClass,

    /// USB interface sub-class, checked only if the interface class matches.
    int? interfaceSubclass,

    /// USB interface protocol, checked only if the interface sub-class matches.
    int? interfaceProtocol,
  });
}

extension DeviceFilterExtension on DeviceFilter {
  /// Device vendor ID.
  external int? vendorId;

  /// Device product ID, checked only if the vendor ID matches.
  external int? productId;

  /// USB interface class, matches any interface on the device.
  external int? interfaceClass;

  /// USB interface sub-class, checked only if the interface class matches.
  external int? interfaceSubclass;

  /// USB interface protocol, checked only if the interface sub-class matches.
  external int? interfaceProtocol;
}

@JS()
@staticInterop
@anonymous
class EnumerateDevicesOptions {
  external factory EnumerateDevicesOptions({
    int? vendorId,
    int? productId,

    /// A device matching any given filter will be returned. An empty filter list
    /// will return all devices the app has permission for.
    JSArray? filters,
  });
}

extension EnumerateDevicesOptionsExtension on EnumerateDevicesOptions {
  external int? vendorId;

  external int? productId;

  /// A device matching any given filter will be returned. An empty filter list
  /// will return all devices the app has permission for.
  external JSArray? filters;
}

@JS()
@staticInterop
@anonymous
class EnumerateDevicesAndRequestAccessOptions {
  external factory EnumerateDevicesAndRequestAccessOptions({
    /// The device vendor ID.
    int vendorId,

    /// The product ID.
    int productId,

    /// The interface ID to request access to.
    /// Only available on Chrome OS. It has no effect on other platforms.
    int? interfaceId,
  });
}

extension EnumerateDevicesAndRequestAccessOptionsExtension
    on EnumerateDevicesAndRequestAccessOptions {
  /// The device vendor ID.
  external int vendorId;

  /// The product ID.
  external int productId;

  /// The interface ID to request access to.
  /// Only available on Chrome OS. It has no effect on other platforms.
  external int? interfaceId;
}

@JS()
@staticInterop
@anonymous
class DevicePromptOptions {
  external factory DevicePromptOptions({
    /// Allow the user to select multiple devices.
    bool? multiple,

    /// Filter the list of devices presented to the user. If multiple filters are
    /// provided devices matching any filter will be displayed.
    JSArray? filters,
  });
}

extension DevicePromptOptionsExtension on DevicePromptOptions {
  /// Allow the user to select multiple devices.
  external bool? multiple;

  /// Filter the list of devices presented to the user. If multiple filters are
  /// provided devices matching any filter will be displayed.
  external JSArray? filters;
}
